Title   : Linux Basics
Author  : Annie Christy, Lisa Goeller, Huting Lin, Jozi McKiernan, and Paige Rinnert
MathJax : True
Css     : ./writeup.css

Heading Depth: 0 

# Linux Basics, Part 2
_Originally created by Annie Christy, Lisa Goeller, Huting Lin, Jozi McKiernan, and Paige Rinnert_

## Permissions

Every file has a ten-character string that defines its attributes. This
string is listed first in the output of `ls -l`.

Here is one example from the output of `ls -l`:
```
-rwxr--rw- 1 blackbeard users 3000 Jun 10 01:53 ocean.txt
```

The command `ls -l` shows other useful information, such as the creator of
the file (blackbeard), the group that owns the file (users), and the
size of the file in bytes (3000), but here we are just going to focus on
the permissions.

The first character in the string `-rwxrâ€“rw-` gives its file type: 
`-` tells us that this is a regular file.

The other nine characters represent the file's mode. Characters two
through four (rwx) represent the owner's permissions, five through seven
(`r--`) represent the owning group's permissions, and eight through ten
(`rw-`) represent the world permissions, the permissions of everyone else.
The permissions of the mode can be represented by three characters:

 | ------- | ----------------------------------------------------------------------------  |
 | Symbol  | Description                                                                   |
 | ------- | ----------------------------------------------------------------------------  |
 | `r`     | allows a file to be opened and read                                           |
 | `w`     | allows a file to be written but does not allow files to be renamed or deleted |
 | `x`     | allows a file to be treated as a program and be executable                    |
 | ------- | ----------------------------------------------------------------------------  |

  - Look at the permissions for ~/LinuxBasics/the_sea. Can
you determine who has permissions to the file?

File modes can also be expressed in binary and octal representations.
Let's see how this works:

 | ------ | -------- | ----------- |
 | Octal  | Binary   | File Mode   |
 | ----   | ------   | ---------   |
 | 0      | 000      | `---`       |
 | 1      | 001      | `--x`       |
 | 2      | 010      | `-w-`       |
 | 3      | 011      | `-wx`       |
 | 4      | 100      | `r--`       |
 | 5      | 101      | `r-x`       |
 | 6      | 110      | `rw-`       |
 | 7      | 111      | `rwx`       |
 | ----   | ------   | ---------   |

The permissions of a file will most often be 0 or 4-7 in the octal
representation.

The `umask` command sets the default permissions given to
newly created files. Running `umask 0000` would set the default
permissions for new files to rw-rw-rw-. The 000 means that all files are
world readable and writable (Ignore the first digit for now because it
is only used for special modes).

   - Run `umask` to see what the current default permissions are. Under
these default permissions, what are world users allowed to do?

OK, so now we know the default settings. But what if we wanted to change
the permissions of an already existing file? There are several
techniques for changing file permissions.

1.  Using `chmod`
```
    chmod <octal #> <filename>
```
With octal representation, you can change the file's mode. For
    example, if you were to input:
```
    chmod 600 MINE.txt
```
This would set the permissions of the file MINE.txt so that only the
    owner would be able to read and write the file.

2.  Using `chown`
```
    chown <name> <filename>
```
This changes the ownership of the file to the specified user.
```
    chown :<group> <filename>
```
This command changes the group ownership to the group `<group>`.
    Note that you can use a combination of these two commands to change
    both individual and group owners at the same time:
```
    chown <name>:<group> <filename>
```

## SU and SUDO {#su-and-sudo .unnumbered}

If you try running chown or chmod on a file that you don't own, you'll
notice that *you can't*. The only way to do this is to become another
user. To become another user, run the following command:
```
su <user>
```
You will then be prompted for the user's password. If you do not include
a username, the command line will assume that you wish to become the
superuser. The superuser has power over everything and can change all
permissions.

To stop being a user in su, simply type exit into the command line and
hit enter.

To run a single command using su, simply type:
```
su -c <command>
```
The sudo command also allows a user to get more privileges, but in a
much more controlled way. Because the administrator configures sudo, a
user using sudo may not have full superuser powers. Sudo differs from su
in that sudo usually requires a user's own password rather than the
root's. Thus, sudo is a much safer command than su. The sudo syntax
looks like this:
```
sudo <command>
```
It is here that we as the CS Department remind you once again, ""With
great power, comes great responsibility." Like Spiderman, when becoming
the superuser you become more than the average human. We only hope that
you continue to use your powers for good.

   -  Remember the ~/LinuxBasics/arrr file you made? Well, it contains the names of
the files you're going to need for the next part of the lab.
However, there is one small problem: you don't have all the permissions
you need to modify them! Change the permissions on the files listed in
arrr so that you have rwx access. (Hint:
flags are your friend.)

## Text Editors
Navigate to the directory `pirate_editors` and run:
```
vim dreadpirate_instructions
```
Then read the file and follow the directions to complete this part of
the lab.

## Treasure Hunt!

There is some treasure hidden on your machine, and we want to help you find it!
In this part of the lab, we'll chart a course through a map to your treasure. 
Each step along the way may requre the use of a new tool: regular expressions.

### Regular Expressions

Regular expressions are a powerful tool for pattern matching. In fact,
you were already using regular expressions when you ran the grep
command! If you learn how to use regular expressions, you can match much
more than just words; you will be able to match patterns like every word
that starts with a j, or every file that contains a number in its name.\

Two programs that are commonly used with regular expressions are awk and
sed. Awk is an interpreted language that is very good at processing text
with regular expressions. Sed stands for "stream editor" and is a
UNIX utility that allows the user to process files. The main difference
between the two is that sed is simpler and easier to use to edit text
while awk is a programming language in and of itself (vaguely similar to
C) that can do a lot more than just edit text. If you are interested,
you can research more about the history and use of awk and sed.\

In this lab, you will mostly be using the sed command. You are
encouraged to read the sed man page to learn more about how the command
works and to get comfortable with the available options. Two option
flags you should definitely know about are -i and -e. The -e command
will make the changes to the file and output the altered file to the
command line without changing the saved version of the file. The -i
option will edit the file in place.\

The regular expression metacharacters are \^ \* - [ ] \\{ } ? + ( ) .
and |.\

They each have different meanings. For example, \^ anchors the beginning
of a line and \$ anchors the end of a line. The . is a character
placeholder, so it could be replaced by any character. So, the regular
expression\

`'^q..x.$'`

will match with any word that is five characters long, starts with a q
and whose second-to-last character is an x. Note that single quotes are
used to designate the regular expression as separate from any command.
If your pattern involves single quotes, you will want to surround your
regular expression with double quotes instead.\

The [ ] characters allow you to designate multiple choices. So the
expression

`'^[ABC]'`

will match any pattern that begins with a capital A, B, or C.\

Obviously, this handout does not cover all there is to know about
regular expressions. It will just serve as an introduction. However,
regular expressions are very powerful and useful, so it is definitely
worth your time to learn more!\

The clue that will lead you to the first step toward your treasure is hidden in
the file treasureisland. To decode the message, you will need to follow
the instructions exactly for the message to appear. It is recommended
that you save copies of your text file at different steps so that you
can go back if you make mistakes. Several .diff files have been provided
so you can check your progress.\

Start by making a copy of the file treasureisland to work on so that you
can keep a copy of the original for reference. (The file is located in
the ~/LinuxBasics directory.)

1.  It is often useful to perform find and replace operations on text
    files. There is a simple sed command just for this purpose. Its
    basic form is:

        sed -i 's/<find>/<replace>/g' file.txt

    The -i option tells sed to edit the file in place. Replace
    \<find\> with the pattern that you want to search for. This can be a
    character or word, or using regular expressions, we can ask it to
    search for many different patterns! Whatever should take the place
    of the patterns should go in the position of \<replace\>. The
    leading s stands for "substitute" and the trailing g stands for
    "global." If the g is left off, only the first instance of the
    pattern in each line will be replaced.\

    So, to remove all the extraneous punctuation that are not single
    quotes or periods and replace them with a space, we could use the
    following command:

        sed -i 's/[?!,:;"-]/ /g' treasureisland

    Run this command now. If you like, it might be a good idea to run it
    with the -e option first, so that you can see what will happen to
    your file without actually changing it.

2.  To remove apostrophes and replace them with spaces, we need to
    surround the regular expression with double quotes instead of single
    quotes.

        sed -i "s/'/ /g" treasureisland

    Run this command now.

3.  It is also useful to remove entire lines of a file by line number.
    If you want to quickly view the lines in a file, you can run
    `cat -n <filename>` which will display all of the lines in a file by
    line number. It is also useful to pipe the cat command through less,
    so that you can go back and view all the lines in a long file. The
    regular expression that allows us to remove lines from a file has
    the general form:

        sed -i '<line number>d' <filename>

    To remove multiple consecutive lines, the command looks like this:

        sed -i '<starting line number>, <ending line number>d' <filename>

    It is even possible to remove several sets of consecutive lines by
    using semicolons to separate the groups of lines that you want to
    delete:

        sed -i '<line number>d;<starting line number>,<ending line number>d' <filename>

    Note that a d is required after each grouping of lines that you want
    to delete.

    We want to remove lines 1-27 from treasureisland. Do this by running
    the following:

        sed -i '1,27d' treasureisland

4.  Next, we will combine find-replace syntax with the delete command
    and some more regular expression pattern matching to remove all
    lines in the file that do not begin with uppercase or lowercase L,
    T, K, A, or O. Do this now.

        sed -i '/^[lLtTkKaAoO]/!d' treasureisland

5.  The next step is to change the file so that all the characters are
    lowercase. For this, it is easier to use awk. Awk does not have an
    option to change a file in place, so we need to file the output into
    a temporary file, then overwrite the old file with the contents of
    the temporary file.

        awk '{print tolower($0)}' treasureisland > tempfile && mv tempfile treasureisland

6.  Next, delete all the periods in the file. You can use the find and
    replace command to do this, just make sure to replace with nothing,
    not with a space. Remember that a period is a metacharacter, so you
    will need to use the escape character to find it like this: \\.

7.  If we can remove specific lines, we should be able to add lines as
    well. The basic format of this regular expression is:

        sed -i '<line number>i <string>' <filename>

    Try it out by inserting the string "run" at line 9 in
    treasureisland. Do not include the double quotes.

8.  Now, insert the string "/usr/local/" at line 8 in treasureisland.
    It includes the / character, so you will need to use the escape
    character within the string to access it.

    If you would like to check your work at this point, there is a file
    called regex_checks/step08check.txt stored in the directory. It contains the
    correct file contents after the first eight steps. Check it against
    your file using the diff command. Remember that you can read the
    diff man page again to learn more about the command.

        diff 

9.  Use the line removal command to remove lines 1-5, 11, 13-15, 17-34,
    and 37. Be careful! You will need to remove all the lines at the
    same time, or you might accidentally delete part of the clue.

    There is another check file, called step09check.txt to check your
    work after step 9.

10. Now, separate the text file so that each word is on its own line. Do
    this by replacing whitespace with a newline. Sed recognizes \\s as
    whitespace and \\n as a newline.

    Once again, a file for checking your work after this step is in the
    directory at step10check.txt.

11. Using the insertion syntax given above, insert a dash at line 74.
    Now insert a dash at line 100.

12. Insert a period at line 149. Remember that a period is a
    metacharacter.

13. Insert the character x at line 38.

14. Next, remove the following lines: 1, 3-33, 35-36, 39-49, 51-58,
    60-73, 76-87, 89-100, 102-120, and 122-149. Remember that you need
    to delete them all at once.

    There is a file for checking your work after this step called
    step14check.txt.

15. Another useful regular expression will append two lines together:

        sed -i 'N;s/\n/ /' file.txt

    This command is essentially replacing every newline character with a
    space. The N at the beginning of the regular expression will append
    the current line and the next line into the space of the pattern.
    Run the above command once on the treasureisland.txt file.

16. Some whitespace snuck into the file. Replace all instances of the
    string `local/ ` with the string `local/` using the global
    find and replace command.

17. Run the command that will append two lines together *three more
    times*.

18. Now, replace all instances of the string ` - ` with the string
    `-`. (The original string has two spaces around it. The new string should 
    have no spaces around it.)

19. Replace all instances of the string ` . ` with the string `.`.
    (The original string has two spaces around it. The new string should 
    have no spaces around it.)

20. Recall that in regular expressions, the \$ character represents the
    end of a line and the . character represents one character. Use
    these to write a regular expression that will delete the last two
    characters from every line in the file.

21. Now, replace any instance of `sh` in the file with `py`.

    Open the file! If all went well, you will have a clue to send you to
    the final step in the lab.

## Executables

Now that you have found the location of the executable file, you should
run it. We will cover shell scripting and executables in another lab so
for now all you need to know is how to run a file. To run most shell
scripts, you will need to be in the same directory in the script, or
know a path to the script. Invoke the scripting language at the
beginning of the command line then the file name.

For instance, to run a shell script called swabthedeck.sh, you would run
the command:

    sh swabthedeck.sh

Python and perl are also common scripting languages. To run a python
script called coconut.py, you would run the command:

    python coconut.py

Try it out with the executable that you just discovered and see what
happens!
